# Generated by json_schema_to_code v1.0.1 : json_schema_to_code
from __future__ import annotations

from abc import ABC
from dataclasses import dataclass
from typing import Literal

from dataclasses_json import dataclass_json


@dataclass_json
@dataclass(kw_only=True)
class Geometry:
    objects: list[GeometryObject]
    constraints: list[Constraint]
    styles: list[Style]


@dataclass_json
@dataclass(kw_only=True)
class GeometryObject(ABC):
    type: str


@dataclass_json
@dataclass(kw_only=True)
class GeometryObjectPoint(GeometryObject):
    name: str
    type: Literal["point"] = "point"
    coordinate: list[float] | None = None


@dataclass_json
@dataclass(kw_only=True)
class GeometryObjectSegment(GeometryObject):
    points: list[str]
    type: Literal["segment"] = "segment"


@dataclass_json
@dataclass(kw_only=True)
class GeometryObjectLine(GeometryObject):
    type: Literal["line"] = "line"
    points: list[str] | None = None


@dataclass_json
@dataclass(kw_only=True)
class GeometryObjectRay(GeometryObject):
    points: list[str]
    type: Literal["ray"] = "ray"


@dataclass_json
@dataclass(kw_only=True)
class GeometryObjectVector(GeometryObject):
    points: list[str]
    type: Literal["vector"] = "vector"


@dataclass_json
@dataclass(kw_only=True)
class GeometryObjectTriangle(GeometryObject):
    kind: str  # Allowed values: "isosceles", "equilateral", "general"
    points: list[str]
    type: Literal["triangle"] = "triangle"


@dataclass_json
@dataclass(kw_only=True)
class GeometryObjectQuadrilateral(GeometryObject):
    kind: str  # Allowed values: "square", "rectangle", "rhombus", "parallelogram", "trapezoid", "kite", "general"
    type: Literal["quadrilateral"] = "quadrilateral"
    points: list[str] | None = None


@dataclass_json
@dataclass(kw_only=True)
class GeometryObjectCircle(GeometryObject):
    center: str
    radius: float
    type: Literal["center"] = "center"


@dataclass_json
@dataclass(kw_only=True)
class Constraint(ABC):
    type: str


@dataclass_json
@dataclass(kw_only=True)
class ConstraintDistanceFixed(Constraint):
    distance: float
    type: Literal["distance_fixed"] = "distance_fixed"


@dataclass_json
@dataclass(kw_only=True)
class ConstraintDistanceEquals(Constraint):
    type: Literal["distance_equals"] = "distance_equals"


@dataclass_json
@dataclass(kw_only=True)
class ConstraintAngleFixed(Constraint):
    angle: float
    type: Literal["angle_fixed"] = "angle_fixed"


@dataclass_json
@dataclass(kw_only=True)
class ConstraintAngleEquals(Constraint):
    type: Literal["angle_equals"] = "angle_equals"


@dataclass_json
@dataclass(kw_only=True)
class Style:
    name: str
    color: str
    strokeWidth: float
