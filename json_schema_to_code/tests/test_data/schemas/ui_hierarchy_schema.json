{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "$id": "https://example.com/ui-hierarchy-schema.json",
  "title": "UI Object Hierarchy Schema",
  "description": "Schema defining a hierarchy of UI object states. This schema is designed for LLM compatibility with strict validation and no additional properties allowed at runtime.",

  "definitions": {
    "_comment_definitions": "DEFINITIONS SECTION: Contains reusable schema components ",

    "style": {
      "type": "object",
      "description": "Style class containing classic styling attributes.",
      "properties": {
        "width": {
          "type": ["string", "number"],
          "description": "Width of the element (px, %, em, etc.)"
        },
        "height": {
          "type": ["string", "number"],
          "description": "Height of the element (px, %, em, etc.)"
        },
        "margin": {
          "type": ["string", "object"],
          "description": "Margin around the element"
        },
        "padding": {
          "type": ["string", "object"],
          "description": "Padding inside the element"
        },
        "backgroundColor": {
          "type": "string",
          "description": "Background color"
        },
        "color": {
          "type": "string",
          "description": "Text color"
        },
        "fontSize": {
          "type": ["string", "number"],
          "description": "Font size"
        },
        "fontWeight": {
          "type": ["string", "number"],
          "description": "Font weight"
        },
        "fontFamily": {
          "type": "string",
          "description": "Font family"
        },
        "textAlign": {
          "type": "string",
          "enum": ["left", "center", "right", "justify"],
          "description": "Text alignment"
        },
        "border": {
          "type": "string",
          "description": "Border specification"
        },
        "borderRadius": {
          "type": ["string", "number"],
          "description": "Border radius"
        },
        "boxShadow": {
          "type": "string",
          "description": "Box shadow"
        },
        "display": {
          "type": "string",
          "enum": ["block", "inline", "inline-block", "flex", "grid", "none"],
          "description": "Display type"
        },
        "position": {
          "type": "string",
          "enum": ["static", "relative", "absolute", "fixed", "sticky"],
          "description": "Position type"
        },
        "top": {
          "type": ["string", "number"],
          "description": "Top position"
        },
        "left": {
          "type": ["string", "number"],
          "description": "Left position"
        },
        "right": {
          "type": ["string", "number"],
          "description": "Right position"
        },
        "bottom": {
          "type": ["string", "number"],
          "description": "Bottom position"
        },
        "zIndex": {
          "type": "number",
          "description": "Z-index for stacking order"
        },
        "opacity": {
          "type": "number",
          "minimum": 0,
          "maximum": 1,
          "description": "Opacity level"
        },
        "overflow": {
          "type": "string",
          "enum": ["visible", "hidden", "scroll", "auto"],
          "description": "Overflow behavior"
        },
        "cursor": {
          "type": "string",
          "description": "Cursor type on hover"
        },
        "visible": {
          "type": "boolean",
          "default": true,
          "description": "Whether the object is visible."
        }
      },
      "additionalProperties": false
    },

    "_comment_base": "BASE CLASS: Common fields for all UI objects. All fields are required for LLM compatibility with null defaults for optional fields.",

    "baseUIObject": {
      "type": "object",
      "description": "Base class with common fields for all UI objects.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type identifier for the UI object (const identifier string set in each object type)"
        },
        "id": {
          "type": ["string", "null"],
          "default": null,
          "description": "Unique identifier for the UI object (required field, can be null)"
        },
        "style": {
          "anyOf": [
            { "$ref": "#/definitions/style" },
            { "type": "null" }
          ],
          "default": null,
          "description": "Optional style object (required field, can be null)"
        },
        "enabled": {
          "type": "boolean",
          "default": true,
          "description": "Whether the object is enabled/interactive"
        },
        "className": {
          "type": ["string", "null"],
          "default": null,
          "description": "CSS class name (required field, can be null)"
        },
        "metadata": {
          "type": ["object", "null"],
          "default": null,
          "description": "Custom metadata mapping strings to primitive types",
          "additionalProperties": {
            "type": ["string", "number", "integer", "boolean", "null"]
          }
        }
      },
      "required": ["type", "id", "style", "enabled", "className", "metadata"],
      "additionalProperties": false
    },

    "_comment_ui_objects": "UI OBJECT DEFINITIONS: Cleanly separated object types, each inheriting from baseUIObject using allOf. Using unevaluatedProperties instead of additionalProperties for proper inheritance validation.",

    "textObject": {
      "allOf": [
        { "$ref": "#/definitions/baseUIObject" },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "text"
            },
            "content": {
              "type": "string",
              "description": "Text content to display"
            },
            "placeholder": {
              "type": "string",
              "description": "Placeholder text"
            }
          },
          "required": ["type", "content"],
          "unevaluatedProperties": false
        }
      ]
    },

    "buttonObject": {
      "allOf": [
        { "$ref": "#/definitions/baseUIObject" },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "button"
            },
            "label": {
              "type": "string",
              "description": "Button label text"
            },
            "action": {
              "type": "string",
              "description": "Action to perform when clicked"
            },
            "variant": {
              "type": "string",
              "enum": ["primary", "secondary", "danger", "warning", "success"],
              "description": "Button variant/style"
            },
            "disabled": {
              "type": "boolean",
              "default": false,
              "description": "Whether the button is disabled"
            }
          },
          "required": ["type", "label"],
          "unevaluatedProperties": false
        }
      ]
    },

    "inputObject": {
      "allOf": [
        { "$ref": "#/definitions/baseUIObject" },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "input"
            },
            "inputType": {
              "type": "string",
              "enum": ["text", "password", "email", "number", "tel", "url", "search"],
              "default": "text",
              "description": "HTML input type"
            },
            "value": {
              "type": "string",
              "description": "Current input value"
            },
            "placeholder": {
              "type": "string",
              "description": "Placeholder text"
            },
            "required": {
              "type": "boolean",
              "default": false,
              "description": "Whether the input is required"
            },
            "maxLength": {
              "type": "integer",
              "minimum": 0,
              "description": "Maximum character length"
            },
            "minLength": {
              "type": "integer",
              "minimum": 0,
              "description": "Minimum character length"
            }
          },
          "required": ["type"],
          "unevaluatedProperties": false
        }
      ]
    },

    "imageObject": {
      "allOf": [
        { "$ref": "#/definitions/baseUIObject" },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "image"
            },
            "src": {
              "type": "string",
              "format": "uri",
              "description": "Image source URL"
            },
            "alt": {
              "type": "string",
              "description": "Alternative text for accessibility"
            },
            "caption": {
              "type": "string",
              "description": "Image caption"
            }
          },
          "required": ["type", "src", "alt"],
          "unevaluatedProperties": false
        }
      ]
    },

    "containerObject": {
      "allOf": [
        { "$ref": "#/definitions/baseUIObject" },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "container"
            },
            "layout": {
              "type": "string",
              "enum": ["flex", "grid", "block", "inline"],
              "default": "block",
              "description": "Layout type for the container"
            },
            "direction": {
              "type": "string",
              "enum": ["row", "column", "row-reverse", "column-reverse"],
              "default": "column",
              "description": "Flex direction (when layout is flex)"
            },
            "justifyContent": {
              "type": "string",
              "enum": ["flex-start", "flex-end", "center", "space-between", "space-around", "space-evenly"],
              "description": "Justify content alignment"
            },
            "alignItems": {
              "type": "string",
              "enum": ["flex-start", "flex-end", "center", "stretch", "baseline"],
              "description": "Align items alignment"
            },
            "children": {
              "type": "array",
              "items": { "$ref": "#/definitions/uiObjectUnion" },
              "description": "Child UI objects"
            }
          },
          "required": ["type"],
          "unevaluatedProperties": false
        }
      ]
    },

    "listObject": {
      "allOf": [
        { "$ref": "#/definitions/baseUIObject" },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "list"
            },
            "ordered": {
              "type": "boolean",
              "default": false,
              "description": "Whether the list is ordered (ol) or unordered (ul)"
            },
            "items": {
              "type": "array",
              "items": { "$ref": "#/definitions/uiObjectUnion" },
              "description": "List items"
            }
          },
          "required": ["type"],
          "unevaluatedProperties": false
        }
      ]
    },

    "modalObject": {
      "allOf": [
        { "$ref": "#/definitions/baseUIObject" },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "modal"
            },
            "title": {
              "type": "string",
              "description": "Modal title"
            },
            "content": {
              "$ref": "#/definitions/uiObjectUnion",
              "description": "Modal content"
            },
            "closable": {
              "type": "boolean",
              "default": true,
              "description": "Whether the modal can be closed"
            },
            "backdrop": {
              "type": "boolean",
              "default": true,
              "description": "Whether to show backdrop"
            }
          },
          "required": ["type", "title", "content"],
          "unevaluatedProperties": false
        }
      ]
    },

    "formObject": {
      "allOf": [
        { "$ref": "#/definitions/baseUIObject" },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "form"
            },
            "action": {
              "type": "string",
              "description": "Form submission action"
            },
            "method": {
              "type": "string",
              "enum": ["GET", "POST", "PUT", "DELETE"],
              "default": "POST",
              "description": "HTTP method for form submission"
            },
            "fields": {
              "type": "array",
              "items": { "$ref": "#/definitions/uiObjectUnion" },
              "description": "Form fields"
            }
          },
          "required": ["type", "fields"],
          "unevaluatedProperties": false
        }
      ]
    },

    "tableObject": {
      "allOf": [
        { "$ref": "#/definitions/baseUIObject" },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "table"
            },
            "headers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Table column headers"
            },
            "rows": {
              "type": "array",
              "items": {
                "type": "array",
                "items": { "$ref": "#/definitions/uiObjectUnion" }
              },
              "description": "Table rows containing UI objects"
            },
            "sortable": {
              "type": "boolean",
              "default": false,
              "description": "Whether columns are sortable"
            }
          },
          "required": ["type", "headers", "rows"],
          "unevaluatedProperties": false
        }
      ]
    },

    "_comment_union": "UNION TYPE: Encompasses all object definitions, used in containers that hold other UI objects (children, items, content, etc.)",

    "uiObjectUnion": {
      "oneOf": [
        { "$ref": "#/definitions/textObject" },
        { "$ref": "#/definitions/buttonObject" },
        { "$ref": "#/definitions/inputObject" },
        { "$ref": "#/definitions/imageObject" },
        { "$ref": "#/definitions/containerObject" },
        { "$ref": "#/definitions/listObject" },
        { "$ref": "#/definitions/modalObject" },
        { "$ref": "#/definitions/formObject" },
        { "$ref": "#/definitions/tableObject" }
      ]
    }
  },

  "_comment_main": "MAIN OBJECT: Root is an instance of uiObjectUnion, allowing any UI object type as the root.",

  "$ref": "#/definitions/uiObjectUnion"
}
