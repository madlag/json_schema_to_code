# Generated by json_schema_to_code v1.0.1 : json_schema_to_code
from __future__ import annotations

from dataclasses import dataclass

from dataclasses_json import dataclass_json


@dataclass_json
@dataclass(kw_only=True)
class ValidationBasic:
    name: str
    age: int
    email: str
    address: Address
    tags: list[str] | None = None

    def __post_init__(self):
        """Validate the object after initialization."""
        if not isinstance(self.name, str):
            raise ValueError(f"name must be a str, got {type(self.name).__name__}")
        if not self.name:
            raise ValueError("name field is required and cannot be empty")
        if not isinstance(self.age, int):
            raise ValueError(f"age must be a int, got {type(self.age).__name__}")
        if not isinstance(self.email, str):
            raise ValueError(f"email must be a str, got {type(self.email).__name__}")
        if not self.email:
            raise ValueError("email field is required and cannot be empty")
        if not isinstance(self.address, Address):
            raise ValueError(f"address must be a Address instance, got {type(self.address).__name__}")


@dataclass_json
@dataclass(kw_only=True)
class Address:
    street: str
    city: str
    zipcode: str

    def __post_init__(self):
        """Validate the object after initialization."""
        if not isinstance(self.street, str):
            raise ValueError(f"street must be a str, got {type(self.street).__name__}")
        if not self.street:
            raise ValueError("street field is required and cannot be empty")
        if not isinstance(self.city, str):
            raise ValueError(f"city must be a str, got {type(self.city).__name__}")
        if not self.city:
            raise ValueError("city field is required and cannot be empty")
        if not isinstance(self.zipcode, str):
            raise ValueError(f"zipcode must be a str, got {type(self.zipcode).__name__}")
        if not self.zipcode:
            raise ValueError("zipcode field is required and cannot be empty")
