# Generated by json_schema_to_code v1.0.1 : json_schema_to_code
from __future__ import annotations

from dataclasses import dataclass

from dataclasses_json import dataclass_json


@dataclass_json
@dataclass(kw_only=True)
class ValidationNumeric:
    age: int
    score: float
    temperature: float | None = None
    percentage: float | None = None
    even_number: int | None = None
    items: list[int] | None = None

    def __post_init__(self):
        """Validate the object after initialization."""
        if not isinstance(self.age, int):
            raise ValueError(f"age must be a int, got {type(self.age).__name__}")
        if self.age < 0:
            raise ValueError(f"age must be >= 0, got {self.age}")
        if self.age > 150:
            raise ValueError(f"age must be <= 150, got {self.age}")
        if not isinstance(self.score, (int, float)):
            raise ValueError(f"score must be a (int, float), got {type(self.score).__name__}")
        if self.score < 0:
            raise ValueError(f"score must be >= 0, got {self.score}")
        if self.score > 100:
            raise ValueError(f"score must be <= 100, got {self.score}")
        if self.temperature is not None and self.temperature <= -273.15:
            raise ValueError(f"temperature must be > -273.15, got {self.temperature}")
        if self.percentage is not None and self.percentage < 0:
            raise ValueError(f"percentage must be >= 0, got {self.percentage}")
        if self.percentage is not None and self.percentage >= 100:
            raise ValueError(f"percentage must be < 100, got {self.percentage}")
        if self.even_number is not None and self.even_number % 2 != 0:
            raise ValueError(f"even_number must be a multiple of 2, got {self.even_number}")
        if self.items is not None and len(self.items) < 1:
            raise ValueError(f"items must have at least 1 items, got {len(self.items)}")
        if self.items is not None and len(self.items) > 10:
            raise ValueError(f"items must have at most 10 items, got {len(self.items)}")
