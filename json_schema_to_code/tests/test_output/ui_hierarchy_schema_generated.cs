// Generated by json_schema_to_code v1.0.1 : json_schema_to_code
using JsonSubTypes;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
[Serializable]
public class Style{
    public FloatOrString? width;
    public FloatOrString? height;
    public ObjectOrString? margin;
    public ObjectOrString? padding;
    public string? backgroundColor;
    public string? color;
    public FloatOrString? fontSize;
    public FloatOrString? fontWeight;
    public string? fontFamily;
    public string? textAlign;
    public string? border;
    public FloatOrString? borderRadius;
    public string? boxShadow;
    public string? display;
    public string? position;
    public FloatOrString? top;
    public FloatOrString? left;
    public FloatOrString? right;
    public FloatOrString? bottom;
    public float? zIndex;
    public float? opacity;
    public string? overflow;
    public string? cursor;
    public bool visible = true;
    public Style(FloatOrString? width, FloatOrString? height, ObjectOrString? margin, ObjectOrString? padding, string? backgroundColor, string? color, FloatOrString? fontSize, FloatOrString? fontWeight, string? fontFamily, string? textAlign, string? border, FloatOrString? borderRadius, string? boxShadow, string? display, string? position, FloatOrString? top, FloatOrString? left, FloatOrString? right, FloatOrString? bottom, float? zIndex, float? opacity, string? overflow, string? cursor, bool visible)    {
        this.width = width;
        this.height = height;
        this.margin = margin;
        this.padding = padding;
        this.backgroundColor = backgroundColor;
        this.color = color;
        this.fontSize = fontSize;
        this.fontWeight = fontWeight;
        this.fontFamily = fontFamily;
        this.textAlign = textAlign;
        this.border = border;
        this.borderRadius = borderRadius;
        this.boxShadow = boxShadow;
        this.display = display;
        this.position = position;
        this.top = top;
        this.left = left;
        this.right = right;
        this.bottom = bottom;
        this.zIndex = zIndex;
        this.opacity = opacity;
        this.overflow = overflow;
        this.cursor = cursor;
        this.visible = visible;
    }
}
[Serializable]
[JsonConverter(typeof(JsonSubtypes), "type")]
[JsonSubtypes.KnownSubType(typeof(TextObject), "text")]
[JsonSubtypes.KnownSubType(typeof(ButtonObject), "button")]
[JsonSubtypes.KnownSubType(typeof(InputObject), "input")]
[JsonSubtypes.KnownSubType(typeof(ImageObject), "image")]
[JsonSubtypes.KnownSubType(typeof(ContainerObject), "container")]
[JsonSubtypes.KnownSubType(typeof(ListObject), "list")]
[JsonSubtypes.KnownSubType(typeof(ModalObject), "modal")]
[JsonSubtypes.KnownSubType(typeof(FormObject), "form")]
[JsonSubtypes.KnownSubType(typeof(TableObject), "table")]
public class BaseUIObject{
    public string type;
    public string? id = null;
    public StyleOrNull style = null;
    public bool enabled = true;
    public string? className = null;
    public object? metadata = null;
    public BaseUIObject(string type, string? id, StyleOrNull style, bool enabled, string? className, object? metadata)    {
        this.type = type;
        this.id = id;
        this.style = style;
        this.enabled = enabled;
        this.className = className;
        this.metadata = metadata;
    }
}
[Serializable]
public class TextObject : BaseUIObject
{
    public new string type = "text";
    public string content;
    public string? placeholder;
    public TextObject(string id, StyleOrNull style, bool enabled, string className, object metadata, string type, string content, string? placeholder): base("text", id, style, enabled, className, metadata)
    {
        this.type = type;
        this.content = content;
        this.placeholder = placeholder;
    }
}
[Serializable]
public class ButtonObject : BaseUIObject
{
    public new string type = "button";
    public string label;
    public string? action;
    public string? variant;
    public bool disabled = false;
    public ButtonObject(string id, StyleOrNull style, bool enabled, string className, object metadata, string type, string label, string? action, string? variant, bool disabled): base("button", id, style, enabled, className, metadata)
    {
        this.type = type;
        this.label = label;
        this.action = action;
        this.variant = variant;
        this.disabled = disabled;
    }
}
[Serializable]
public class InputObject : BaseUIObject
{
    public new string type = "input";
    public string inputType = "text";
    public string? value;
    public string? placeholder;
    public bool required = false;
    public int? maxLength;
    public int? minLength;
    public InputObject(string id, StyleOrNull style, bool enabled, string className, object metadata, string type, string inputType, string? value, string? placeholder, bool required, int? maxLength, int? minLength): base("input", id, style, enabled, className, metadata)
    {
        this.type = type;
        this.inputType = inputType;
        this.value = value;
        this.placeholder = placeholder;
        this.required = required;
        this.maxLength = maxLength;
        this.minLength = minLength;
    }
}
[Serializable]
public class ImageObject : BaseUIObject
{
    public new string type = "image";
    public string src;
    public string alt;
    public string? caption;
    public ImageObject(string id, StyleOrNull style, bool enabled, string className, object metadata, string type, string src, string alt, string? caption): base("image", id, style, enabled, className, metadata)
    {
        this.type = type;
        this.src = src;
        this.alt = alt;
        this.caption = caption;
    }
}
[Serializable]
public class ContainerObject : BaseUIObject
{
    public new string type = "container";
    public string layout = "block";
    public string direction = "column";
    public string? justifyContent;
    public string? alignItems;
    public List<UiObjectUnion>? children;
    public ContainerObject(string id, StyleOrNull style, bool enabled, string className, object metadata, string type, string layout, string direction, string? justifyContent, string? alignItems, List<UiObjectUnion>? children): base("container", id, style, enabled, className, metadata)
    {
        this.type = type;
        this.layout = layout;
        this.direction = direction;
        this.justifyContent = justifyContent;
        this.alignItems = alignItems;
        this.children = children;
    }
}
[Serializable]
public class ListObject : BaseUIObject
{
    public new string type = "list";
    public bool ordered = false;
    public List<UiObjectUnion>? items;
    public ListObject(string id, StyleOrNull style, bool enabled, string className, object metadata, string type, bool ordered, List<UiObjectUnion>? items): base("list", id, style, enabled, className, metadata)
    {
        this.type = type;
        this.ordered = ordered;
        this.items = items;
    }
}
[Serializable]
public class ModalObject : BaseUIObject
{
    public new string type = "modal";
    public string title;
    public UiObjectUnion content;
    public bool closable = true;
    public bool backdrop = true;
    public ModalObject(string id, StyleOrNull style, bool enabled, string className, object metadata, string type, string title, UiObjectUnion content, bool closable, bool backdrop): base("modal", id, style, enabled, className, metadata)
    {
        this.type = type;
        this.title = title;
        this.content = content;
        this.closable = closable;
        this.backdrop = backdrop;
    }
}
[Serializable]
public class FormObject : BaseUIObject
{
    public new string type = "form";
    public string? action;
    public string method = "POST";
    public List<UiObjectUnion> fields;
    public FormObject(string id, StyleOrNull style, bool enabled, string className, object metadata, string type, string? action, string method, List<UiObjectUnion> fields): base("form", id, style, enabled, className, metadata)
    {
        this.type = type;
        this.action = action;
        this.method = method;
        this.fields = fields;
    }
}
[Serializable]
public class TableObject : BaseUIObject
{
    public new string type = "table";
    public List<string> headers;
    public List<List<UiObjectUnion>> rows;
    public bool sortable = false;
    public TableObject(string id, StyleOrNull style, bool enabled, string className, object metadata, string type, List<string> headers, List<List<UiObjectUnion>> rows, bool sortable): base("table", id, style, enabled, className, metadata)
    {
        this.type = type;
        this.headers = headers;
        this.rows = rows;
        this.sortable = sortable;
    }
}
